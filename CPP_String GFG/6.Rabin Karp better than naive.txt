#include <bits/stdc++.h>
using namespace std;

//Rabin Karp better than naive 
vector<int> naive_pattern_search(string &txt, string &pat)
{
    int m=pat.length(),n=txt.length();
    int d=256,prime=101,h_of_txt=0,h_of_pat=0,h=1;
    vector<int> v;
    int j=0;
    
    for(int i=0;i<m-1;i++)
    h=(h*d)%prime;
    
    for(int i=0;i<m;i++)
    {   
        // Calculating hash of 1st window
        h_of_pat= (d*h_of_pat + pat[i])%prime;
        h_of_txt= (d*h_of_txt + txt[i])%prime;
    }
    
    for(int i=0;i<=n-m;i++)
    {
        if(h_of_pat==h_of_txt)
        {
            
            for(;j<m;j++)
            if(pat[j] != txt[i+j])
            break;\
            
            
            if(j==m)
            v.push_back(i);
        }
        if(i<n-m){
            //slide the window
            h_of_txt= (d*(h_of_txt-txt[i]*h)+ txt[i+m])%prime;
            
            if(h_of_txt<0) h_of_txt += prime;
            }   
    }
    return v;
}

int main()
{
    string txt = "abababcd",pat="ab";
    vector<int> v=naive_pattern_search(txt,pat);
    for(auto x: v)
    cout<<x<<"  ";     
    return 0;    
}
